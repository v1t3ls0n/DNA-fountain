[INFO] [TEST] Initializing DNAFountain with chunk_size=4...

[DEBUG] === DNAFountain Initialization ===
[DEBUG] Chunk size: 4
[DEBUG] Degree map: {'0000': 2, '0001': 2, '0010': 1, '0011': 1, '0100': 2, '0101': 4, '0110': 2, '0111': 1, '1000': 6, '1001': 1, '1010': 1, '1011': 2, '1100': 7, '1101': 2, '1110': 1, '1111': 4}
[DEBUG] ==================================
[INFO] [TEST] Testing binary message: 01000001101011110000010110100101
[DEBUG] === FULL MESSAGE ENCODING START ===
[DEBUG] Input binary message: 01000001101011110000010110100101
[DEBUG] === DROPLETS ENCODING START ===
[DEBUG] Input binary data: 01000001101011110000010110100101
[DEBUG] === SPLIT INTO CHUNKS ===
[DEBUG] Input binary string: 01000001101011110000010110100101
[DEBUG] Chunks: ['0100', '0001', '1010', '1111', '0000', '0101', '1010', '0101']
[DEBUG] =========================
[DEBUG] === DROPLET GENERATION START ===
[DEBUG] Available chunks: ['0100', '0001', '1010', '1111', '0000', '0101', '1010', '0101']
[DEBUG] Chunk indices: [0, 1, 2, 3, 4, 5, 6, 7]
[DEBUG] >> Processing droplet with seed '0000' (degree 2)
[DEBUG]    Selected indices: [6, 7]
[DEBUG]    Selected chunks: ['1010', '0101']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['1010', '0101']
[DEBUG] XOR result (binary): 1111
[DEBUG] ==================
[DEBUG]    XOR result (binary): 1111
[DEBUG] >> Processing droplet with seed '0001' (degree 2)
[DEBUG]    Selected indices: [2, 4]
[DEBUG]    Selected chunks: ['1010', '0000']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['1010', '0000']
[DEBUG] XOR result (binary): 1010
[DEBUG] ==================
[DEBUG]    XOR result (binary): 1010
[DEBUG] >> Processing droplet with seed '0010' (degree 1)
[DEBUG]    Selected indices: [0]
[DEBUG]    Selected chunks: ['0100']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0100']
[DEBUG] XOR result (binary): 0100
[DEBUG] ==================
[DEBUG]    XOR result (binary): 0100
[DEBUG] >> Processing droplet with seed '0011' (degree 1)
[DEBUG]    Selected indices: [3]
[DEBUG]    Selected chunks: ['1111']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['1111']
[DEBUG] XOR result (binary): 1111
[DEBUG] ==================
[DEBUG]    XOR result (binary): 1111
[DEBUG] >> Processing droplet with seed '0100' (degree 2)
[DEBUG]    Selected indices: [3, 2]
[DEBUG]    Selected chunks: ['1111', '1010']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['1111', '1010']
[DEBUG] XOR result (binary): 0101
[DEBUG] ==================
[DEBUG]    XOR result (binary): 0101
[DEBUG] >> Processing droplet with seed '0101' (degree 4)
[DEBUG]    Selected indices: [4, 5, 2, 7]
[DEBUG]    Selected chunks: ['0000', '0101', '1010', '0101']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0000', '0101', '1010', '0101']
[DEBUG] XOR result (binary): 1010
[DEBUG] ==================
[DEBUG]    XOR result (binary): 1010
[DEBUG] >> Processing droplet with seed '0110' (degree 2)
[DEBUG]    Selected indices: [1, 3]
[DEBUG]    Selected chunks: ['0001', '1111']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0001', '1111']
[DEBUG] XOR result (binary): 1110
[DEBUG] ==================
[DEBUG]    XOR result (binary): 1110
[DEBUG] >> Processing droplet with seed '0111' (degree 1)
[DEBUG]    Selected indices: [5]
[DEBUG]    Selected chunks: ['0101']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0101']
[DEBUG] XOR result (binary): 0101
[DEBUG] ==================
[DEBUG]    XOR result (binary): 0101
[DEBUG] >> Processing droplet with seed '1000' (degree 6)
[DEBUG]    Selected indices: [3, 2, 7, 1, 4, 6]
[DEBUG]    Selected chunks: ['1111', '1010', '0101', '0001', '0000', '1010']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['1111', '1010', '0101', '0001', '0000', '1010']
[DEBUG] XOR result (binary): 1011
[DEBUG] ==================
[DEBUG]    XOR result (binary): 1011
[DEBUG] >> Processing droplet with seed '1001' (degree 1)
[DEBUG]    Selected indices: [7]
[DEBUG]    Selected chunks: ['0101']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0101']
[DEBUG] XOR result (binary): 0101
[DEBUG] ==================
[DEBUG]    XOR result (binary): 0101
[DEBUG] >> Processing droplet with seed '1010' (degree 1)
[DEBUG]    Selected indices: [0]
[DEBUG]    Selected chunks: ['0100']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0100']
[DEBUG] XOR result (binary): 0100
[DEBUG] ==================
[DEBUG]    XOR result (binary): 0100
[DEBUG] >> Processing droplet with seed '1011' (degree 2)
[DEBUG]    Selected indices: [7, 6]
[DEBUG]    Selected chunks: ['0101', '1010']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0101', '1010']
[DEBUG] XOR result (binary): 1111
[DEBUG] ==================
[DEBUG]    XOR result (binary): 1111
[DEBUG] >> Processing droplet with seed '1100' (degree 7)
[DEBUG]    Selected indices: [7, 2, 5, 4, 6, 0, 1]
[DEBUG]    Selected chunks: ['0101', '1010', '0101', '0000', '1010', '0100', '0001']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0101', '1010', '0101', '0000', '1010', '0100', '0001']
[DEBUG] XOR result (binary): 0101
[DEBUG] ==================
[DEBUG]    XOR result (binary): 0101
[DEBUG] >> Processing droplet with seed '1101' (degree 2)
[DEBUG]    Selected indices: [4, 2]
[DEBUG]    Selected chunks: ['0000', '1010']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0000', '1010']
[DEBUG] XOR result (binary): 1010
[DEBUG] ==================
[DEBUG]    XOR result (binary): 1010
[DEBUG] >> Processing droplet with seed '1110' (degree 1)
[DEBUG]    Selected indices: [1]
[DEBUG]    Selected chunks: ['0001']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0001']
[DEBUG] XOR result (binary): 0001
[DEBUG] ==================
[DEBUG]    XOR result (binary): 0001
[DEBUG] >> Processing droplet with seed '1111' (degree 4)
[DEBUG]    Selected indices: [3, 0, 4, 6]
[DEBUG]    Selected chunks: ['1111', '0100', '0000', '1010']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['1111', '0100', '0000', '1010']
[DEBUG] XOR result (binary): 0001
[DEBUG] ==================
[DEBUG]    XOR result (binary): 0001
[DEBUG] === DROPLET GENERATION END ===
[DEBUG] Generated droplets (binary seed and data payload): [('0000', '1111'), ('0001', '1010'), ('0010', '0100'), ('0011', '1111'), ('0100', '0101'), ('0101', '1010'), ('0110', '1110'), ('0111', '0101'), ('1000', '1011'), ('1001', '0101'), ('1010', '0100'), ('1011', '1111'), ('1100', '0101'), ('1101', '1010'), ('1110', '0001'), ('1111', '0001')]
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0000
[DEBUG] Mapped DNA sequence: AA
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1111
[DEBUG] Mapped DNA sequence: TT
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '0000' mapped to (DNA) 'AA'; Data Payload (binary) '1111' mapped to (DNA) 'TT'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0001
[DEBUG] Mapped DNA sequence: AC
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1010
[DEBUG] Mapped DNA sequence: GG
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '0001' mapped to (DNA) 'AC'; Data Payload (binary) '1010' mapped to (DNA) 'GG'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0010
[DEBUG] Mapped DNA sequence: AG
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0100
[DEBUG] Mapped DNA sequence: CA
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '0010' mapped to (DNA) 'AG'; Data Payload (binary) '0100' mapped to (DNA) 'CA'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0011
[DEBUG] Mapped DNA sequence: AT
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1111
[DEBUG] Mapped DNA sequence: TT
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '0011' mapped to (DNA) 'AT'; Data Payload (binary) '1111' mapped to (DNA) 'TT'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0100
[DEBUG] Mapped DNA sequence: CA
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0101
[DEBUG] Mapped DNA sequence: CC
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '0100' mapped to (DNA) 'CA'; Data Payload (binary) '0101' mapped to (DNA) 'CC'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0101
[DEBUG] Mapped DNA sequence: CC
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1010
[DEBUG] Mapped DNA sequence: GG
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '0101' mapped to (DNA) 'CC'; Data Payload (binary) '1010' mapped to (DNA) 'GG'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0110
[DEBUG] Mapped DNA sequence: CG
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1110
[DEBUG] Mapped DNA sequence: TG
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '0110' mapped to (DNA) 'CG'; Data Payload (binary) '1110' mapped to (DNA) 'TG'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0111
[DEBUG] Mapped DNA sequence: CT
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0101
[DEBUG] Mapped DNA sequence: CC
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '0111' mapped to (DNA) 'CT'; Data Payload (binary) '0101' mapped to (DNA) 'CC'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1000
[DEBUG] Mapped DNA sequence: GA
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1011
[DEBUG] Mapped DNA sequence: GT
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '1000' mapped to (DNA) 'GA'; Data Payload (binary) '1011' mapped to (DNA) 'GT'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1001
[DEBUG] Mapped DNA sequence: GC
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0101
[DEBUG] Mapped DNA sequence: CC
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '1001' mapped to (DNA) 'GC'; Data Payload (binary) '0101' mapped to (DNA) 'CC'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1010
[DEBUG] Mapped DNA sequence: GG
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0100
[DEBUG] Mapped DNA sequence: CA
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '1010' mapped to (DNA) 'GG'; Data Payload (binary) '0100' mapped to (DNA) 'CA'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1011
[DEBUG] Mapped DNA sequence: GT
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1111
[DEBUG] Mapped DNA sequence: TT
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '1011' mapped to (DNA) 'GT'; Data Payload (binary) '1111' mapped to (DNA) 'TT'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1100
[DEBUG] Mapped DNA sequence: TA
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0101
[DEBUG] Mapped DNA sequence: CC
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '1100' mapped to (DNA) 'TA'; Data Payload (binary) '0101' mapped to (DNA) 'CC'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1101
[DEBUG] Mapped DNA sequence: TC
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1010
[DEBUG] Mapped DNA sequence: GG
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '1101' mapped to (DNA) 'TC'; Data Payload (binary) '1010' mapped to (DNA) 'GG'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1110
[DEBUG] Mapped DNA sequence: TG
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0001
[DEBUG] Mapped DNA sequence: AC
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '1110' mapped to (DNA) 'TG'; Data Payload (binary) '0001' mapped to (DNA) 'AC'
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 1111
[DEBUG] Mapped DNA sequence: TT
[DEBUG] ==================
[DEBUG] === MAP TO DNA ===
[DEBUG] Binary input: 0001
[DEBUG] Mapped DNA sequence: AC
[DEBUG] ==================
[DEBUG] Encoded droplet: Seed (binary) '1111' mapped to (DNA) 'TT'; Data Payload (binary) '0001' mapped to (DNA) 'AC'
[DEBUG] === DROPLETS ENCODING END ===
[DEBUG] DNA Encoded Droplets (both seed and data payload in DNA): [('AA', 'TT'), ('AC', 'GG'), ('AG', 'CA'), ('AT', 'TT'), ('CA', 'CC'), ('CC', 'GG'), ('CG', 'TG'), ('CT', 'CC'), ('GA', 'GT'), ('GC', 'CC'), ('GG', 'CA'), ('GT', 'TT'), ('TA', 'CC'), ('TC', 'GG'), ('TG', 'AC'), ('TT', 'AC')]
[DEBUG] Droplet encoded: Seed (DNA): 'AA' | Droplet data payload (DNA): 'TT'
[DEBUG] Concatenated droplet (DNA): 'AATT'
[DEBUG] Droplet encoded: Seed (DNA): 'AC' | Droplet data payload (DNA): 'GG'
[DEBUG] Concatenated droplet (DNA): 'ACGG'
[DEBUG] Droplet encoded: Seed (DNA): 'AG' | Droplet data payload (DNA): 'CA'
[DEBUG] Concatenated droplet (DNA): 'AGCA'
[DEBUG] Droplet encoded: Seed (DNA): 'AT' | Droplet data payload (DNA): 'TT'
[DEBUG] Concatenated droplet (DNA): 'ATTT'
[DEBUG] Droplet encoded: Seed (DNA): 'CA' | Droplet data payload (DNA): 'CC'
[DEBUG] Concatenated droplet (DNA): 'CACC'
[DEBUG] Droplet encoded: Seed (DNA): 'CC' | Droplet data payload (DNA): 'GG'
[DEBUG] Concatenated droplet (DNA): 'CCGG'
[DEBUG] Droplet encoded: Seed (DNA): 'CG' | Droplet data payload (DNA): 'TG'
[DEBUG] Concatenated droplet (DNA): 'CGTG'
[DEBUG] Droplet encoded: Seed (DNA): 'CT' | Droplet data payload (DNA): 'CC'
[DEBUG] Concatenated droplet (DNA): 'CTCC'
[DEBUG] Droplet encoded: Seed (DNA): 'GA' | Droplet data payload (DNA): 'GT'
[DEBUG] Concatenated droplet (DNA): 'GAGT'
[DEBUG] Droplet encoded: Seed (DNA): 'GC' | Droplet data payload (DNA): 'CC'
[DEBUG] Concatenated droplet (DNA): 'GCCC'
[DEBUG] Droplet encoded: Seed (DNA): 'GG' | Droplet data payload (DNA): 'CA'
[DEBUG] Concatenated droplet (DNA): 'GGCA'
[DEBUG] Droplet encoded: Seed (DNA): 'GT' | Droplet data payload (DNA): 'TT'
[DEBUG] Concatenated droplet (DNA): 'GTTT'
[DEBUG] Droplet encoded: Seed (DNA): 'TA' | Droplet data payload (DNA): 'CC'
[DEBUG] Concatenated droplet (DNA): 'TACC'
[DEBUG] Droplet encoded: Seed (DNA): 'TC' | Droplet data payload (DNA): 'GG'
[DEBUG] Concatenated droplet (DNA): 'TCGG'
[DEBUG] Droplet encoded: Seed (DNA): 'TG' | Droplet data payload (DNA): 'AC'
[DEBUG] Concatenated droplet (DNA): 'TGAC'
[DEBUG] Droplet encoded: Seed (DNA): 'TT' | Droplet data payload (DNA): 'AC'
[DEBUG] Concatenated droplet (DNA): 'TTAC'
[DEBUG] Full DNA Encoded Message: AATTACGGAGCAATTTCACCCCGGCGTGCTCCGAGTGCCCGGCAGTTTTACCTCGGTGACTTAC
[DEBUG] === FULL MESSAGE ENCODING END ===
[DEBUG] === FULL MESSAGE DECODING START ===
[DEBUG] Input DNA message: AATTACGGAGCAATTTCACCCCGGCGTGCTCCGAGTGCCCGGCAGTTTTACCTCGGTGACTTAC
[DEBUG] === DROPLETS DECODING START ===
[DEBUG] Expected number of chunks: 8
[DEBUG] DNA Encoded Droplets (both seed and data payload in DNA): [('AA', 'TT'), ('AC', 'GG'), ('AG', 'CA'), ('AT', 'TT'), ('CA', 'CC'), ('CC', 'GG'), ('CG', 'TG'), ('CT', 'CC'), ('GA', 'GT'), ('GC', 'CC'), ('GG', 'CA'), ('GT', 'TT'), ('TA', 'CC'), ('TC', 'GG'), ('TG', 'AC'), ('TT', 'AC')]
[DEBUG] Droplet: Seed (DNA) 'AA' -> Seed (binary) '0000' -> Indices [6, 7] | Data Payload (DNA): 'TT' -> Data Payload (binary): '1111'
[DEBUG] Droplet: Seed (DNA) 'AC' -> Seed (binary) '0001' -> Indices [2, 4] | Data Payload (DNA): 'GG' -> Data Payload (binary): '1010'
[DEBUG] Droplet: Seed (DNA) 'AG' -> Seed (binary) '0010' -> Indices [0] | Data Payload (DNA): 'CA' -> Data Payload (binary): '0100'
[DEBUG] Droplet: Seed (DNA) 'AT' -> Seed (binary) '0011' -> Indices [3] | Data Payload (DNA): 'TT' -> Data Payload (binary): '1111'
[DEBUG] Droplet: Seed (DNA) 'CA' -> Seed (binary) '0100' -> Indices [3, 2] | Data Payload (DNA): 'CC' -> Data Payload (binary): '0101'
[DEBUG] Droplet: Seed (DNA) 'CC' -> Seed (binary) '0101' -> Indices [4, 5, 2, 7] | Data Payload (DNA): 'GG' -> Data Payload (binary): '1010'
[DEBUG] Droplet: Seed (DNA) 'CG' -> Seed (binary) '0110' -> Indices [1, 3] | Data Payload (DNA): 'TG' -> Data Payload (binary): '1110'
[DEBUG] Droplet: Seed (DNA) 'CT' -> Seed (binary) '0111' -> Indices [5] | Data Payload (DNA): 'CC' -> Data Payload (binary): '0101'
[DEBUG] Droplet: Seed (DNA) 'GA' -> Seed (binary) '1000' -> Indices [3, 2, 7, 1, 4, 6] | Data Payload (DNA): 'GT' -> Data Payload (binary): '1011'
[DEBUG] Droplet: Seed (DNA) 'GC' -> Seed (binary) '1001' -> Indices [7] | Data Payload (DNA): 'CC' -> Data Payload (binary): '0101'
[DEBUG] Droplet: Seed (DNA) 'GG' -> Seed (binary) '1010' -> Indices [0] | Data Payload (DNA): 'CA' -> Data Payload (binary): '0100'
[DEBUG] Droplet: Seed (DNA) 'GT' -> Seed (binary) '1011' -> Indices [7, 6] | Data Payload (DNA): 'TT' -> Data Payload (binary): '1111'
[DEBUG] Droplet: Seed (DNA) 'TA' -> Seed (binary) '1100' -> Indices [7, 2, 5, 4, 6, 0, 1] | Data Payload (DNA): 'CC' -> Data Payload (binary): '0101'
[DEBUG] Droplet: Seed (DNA) 'TC' -> Seed (binary) '1101' -> Indices [4, 2] | Data Payload (DNA): 'GG' -> Data Payload (binary): '1010'
[DEBUG] Droplet: Seed (DNA) 'TG' -> Seed (binary) '1110' -> Indices [1] | Data Payload (DNA): 'AC' -> Data Payload (binary): '0001'
[DEBUG] Droplet: Seed (DNA) 'TT' -> Seed (binary) '1111' -> Indices [3, 0, 4, 6] | Data Payload (DNA): 'AC' -> Data Payload (binary): '0001'
[DEBUG] Initial reconstructed chunks: [None, None, None, None, None, None, None, None]
[DEBUG] Direct assignment: Chunk[0] = 0100
[DEBUG] Direct assignment: Chunk[3] = 1111
[DEBUG] Direct assignment: Chunk[5] = 0101
[DEBUG] Direct assignment: Chunk[7] = 0101
[DEBUG] Direct assignment: Chunk[0] = 0100
[DEBUG] Direct assignment: Chunk[1] = 0001
[DEBUG] Iteration 1/8
[DEBUG] Resolving Chunk[6] using droplet [6, 7] with data payload (binary): '1111' and known chunks: ['0101']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['1111', '0101']
[DEBUG] XOR result (binary): 1010
[DEBUG] ==================
[DEBUG] Inferred Chunk[6] = 1010
[DEBUG] Resolving Chunk[2] using droplet [3, 2] with data payload (binary): '0101' and known chunks: ['1111']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['0101', '1111']
[DEBUG] XOR result (binary): 1010
[DEBUG] ==================
[DEBUG] Inferred Chunk[2] = 1010
[DEBUG] Resolving Chunk[4] using droplet [4, 5, 2, 7] with data payload (binary): '1010' and known chunks: ['0101', '1010', '0101']
[DEBUG] === XOR CHUNKS ===
[DEBUG] Input chunks: ['1010', '0101', '1010', '0101']
[DEBUG] XOR result (binary): 0000
[DEBUG] ==================
[DEBUG] Inferred Chunk[4] = 0000
[DEBUG] Iteration 2/8
[DEBUG] Iteration 3/8
[DEBUG] Iteration 4/8
[DEBUG] Iteration 5/8
[DEBUG] Iteration 6/8
[DEBUG] Iteration 7/8
[DEBUG] Iteration 8/8
[DEBUG] Reconstructed chunks: ['0100', '0001', '1010', '1111', '0000', '0101', '1010', '0101']
[DEBUG] Decoded binary message: 01000001101011110000010110100101
[DEBUG] === DROPLETS DECODING END ===
[DEBUG] Decoded binary message: 01000001101011110000010110100101
[DEBUG] === FULL MESSAGE DECODING END ===
[INFO] [TEST] Original binary message: 01000001101011110000010110100101
[INFO] [TEST] Full DNA encoded message: AATTACGGAGCAATTTCACCCCGGCGTGCTCCGAGTGCCCGGCAGTTTTACCTCGGTGACTTAC
[INFO] [TEST] Decoded binary message: 01000001101011110000010110100101
[INFO] [TEST] ✅ All tests passed!
